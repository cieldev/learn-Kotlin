fun main() {
    val num1:Byte = 2
    val num2:Byte = 6

    println(num1 + num2) //足し算
    println(num2 - num1) //引き算
    println(num1 * num2) //掛け算
    println(num2 / num1) //割り算
    println(num2 % num1) //剰余

}
/*
主な代入演算子
演算子	概要
=	    右辺の値を左辺に代入
+=	    右辺の値を加算した結果を代入
-=	    右辺の値を減算した結果を代入
*=	    右辺の値を乗算した結果を代入
/=	    右辺の値で除算した結果を代入
%=	    右辺の値で除算した余りを代入
&=	    右辺の値で論理積演算した結果を代入
|=	    右辺の値で論理和演算した結果を代入
^=	    右辺の値で排他的論理和演算した結果を代入
<<=	    右辺の値だけ左シフトした結果を代入
>>=	    右辺の値だけ右シフトした結果を代入
>>>=    右辺の値だけ右シフトした結果を代入

主な比較演算子
演算子	概要
==	    左辺と右辺が等しければtrue
!=	    左辺と右辺が等しくなければtrue
<	    左辺が右辺より小さければtrue
<=	    左辺が右辺以下であればtrue
>	    左辺が右辺より大きければtrue
>=	    左辺が右辺以上であればtrue
?:	    「条件式 ? 式1 : 式2」。条件式がtrueなら式1、falseなら式2

主な論理演算子
演算子	概要
&&	    左辺右辺がともにtrueの場合はtrue
||	    左辺右辺どちらかがtrueの場合はtrue
!	    式がfalseの場合はtrue
^	    左辺右辺いずれかがtrueで、かつ、ともにtrueでない場合にtrue

主なビット演算子
演算子	概要
&	    論理積。左右双方の式にセットされているビット
|	    論理和。左右いずれかの式にセットされているビット
~	    ビットを反転
<<	    ビットを左シフト
>>	    ビットを右シフト
>>>	    ビットを右シフト、左端は0埋め

演算子の優先順位
・(引数)、[]、.、++、–（後置）
・!、~、+、-（単項）、++、–（前置）
・new、( キャスト )
・*、/、%
・+、-（算術）
・<<、>>、>>>
・>、>=、<、<=、instanceof
・==、!=
・&
・^
・|
・&&
・||
・?:
・=、+=、-=、*=、/=、% =、&=、^=、|=、<<=、>>=、>>>=
 */